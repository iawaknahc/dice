{"version":3,"sources":["App.module.scss","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","valueToUnicode","RenderContext","createContext","sort","redDice","NewCombinationInput","onClickDie","onClickClearAll","onClickCancelDie","newCombination","renderConfig","useContext","buttons","i","red","push","key","style","color","className","styles","dieButton","onClick","e","pending","die","length","input","dice","clear","clearButton","CombinationList","combinations","onClickDelete","list","cells","c","subcells","j","v","subcell","cell","cellNumber","deleteButton","App","useState","state","setState","useEffect","valueStr","localStorage","getItem","value","JSON","parse","stringify","setItem","useCallback","preventDefault","stopPropagation","prevState","concat","index","slice","confirm","app","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bf919374.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2ziFi\",\"input\":\"App_input__13lVr\",\"dice\":\"App_dice__12yV2\",\"pending\":\"App_pending__3Yz2z\",\"dieButton\":\"App_dieButton__1Kt_E\",\"list\":\"App_list__1SN5w\",\"cell\":\"App_cell__2E5fJ\",\"cellNumber\":\"App_cellNumber__2jvY-\",\"deleteButton\":\"App_deleteButton__22bRF\",\"subcell\":\"App_subcell__3P-pJ\",\"clear\":\"App_clear__bmNxq\",\"clearButton\":\"App_clearButton__2c_vx\"};","import React, {\n  useState,\n  useCallback,\n  createContext,\n  useContext,\n  useEffect,\n} from \"react\";\nimport styles from \"./App.module.scss\";\n\ninterface RenderConfiguration {\n  sort: boolean;\n  redDice: boolean[];\n}\n\ntype Combination = number[];\n\nconst valueToUnicode: string[] = [\"\", \"⚀\", \"⚁\", \"⚂\", \"⚃\", \"⚄\", \"⚅\"];\n\nconst RenderContext = createContext<RenderConfiguration>({\n  sort: true,\n  redDice: [false, true, false, false, true, false, false],\n});\n\nfunction NewCombinationInput({\n  onClickDie,\n  onClickClearAll,\n  onClickCancelDie,\n  newCombination,\n}: {\n  onClickDie: (e: React.MouseEvent<HTMLElement>, value: number) => void;\n  onClickClearAll: (e: React.MouseEvent<HTMLElement>) => void;\n  onClickCancelDie: (e: React.MouseEvent<HTMLElement>, index: number) => void;\n  newCombination: Combination;\n}) {\n  const renderConfig = useContext(RenderContext);\n  const buttons = [];\n  for (let i = 1; i <= 6; i++) {\n    const red = renderConfig.redDice[i];\n    buttons.push(\n      <button\n        key={i}\n        style={{\n          color: red ? \"red\" : \"black\",\n        }}\n        className={styles.dieButton}\n        onClick={e => {\n          onClickDie(e, i);\n        }}\n      >\n        {valueToUnicode[i]}\n      </button>\n    );\n  }\n  const pending = [];\n  for (let i = 0; i < newCombination.length; i++) {\n    const die = newCombination[i];\n    const red = renderConfig.redDice[die];\n    pending.push(\n      <button\n        key={i}\n        style={{\n          color: red ? \"red\" : \"black\",\n        }}\n        className={styles.dieButton}\n        onClick={e => {\n          onClickCancelDie(e, i);\n        }}\n      >\n        {valueToUnicode[die]}\n      </button>\n    );\n  }\n\n  return (\n    <div className={styles.input}>\n      <div className={styles.dice}>{buttons}</div>\n      <div className={styles.clear}>\n        <button className={styles.clearButton} onClick={onClickClearAll}>\n          {\"Clear All Combinations\"}\n        </button>\n      </div>\n      <div className={styles.pending}>{pending}</div>\n    </div>\n  );\n}\n\nfunction CombinationList({\n  combinations,\n  onClickDelete,\n}: {\n  combinations: Combination[];\n  onClickDelete: (e: React.MouseEvent<HTMLElement>, index: number) => void;\n}) {\n  const renderConfig = useContext(RenderContext);\n\n  if (combinations.length <= 0) {\n    return <div className={styles.list}>{\"No combinations yet\"}</div>;\n  }\n\n  const cells = [];\n  for (let i = 0; i < combinations.length; ++i) {\n    const c = combinations[i];\n    const subcells = [];\n    for (let j = 0; j < c.length; ++j) {\n      const v = c[j];\n      const red = renderConfig.redDice[v];\n      subcells.push(\n        <div\n          key={j}\n          style={{\n            color: red ? \"red\" : \"black\",\n          }}\n          className={styles.subcell}\n        >\n          {valueToUnicode[v]}\n        </div>\n      );\n    }\n    cells.push(\n      <div key={i} className={styles.cell}>\n        <div className={styles.cellNumber}>{i + 1}</div>\n        {subcells}\n        <button\n          className={styles.deleteButton}\n          onClick={e => {\n            onClickDelete(e, i);\n          }}\n        >\n          {\"␡\"}\n        </button>\n      </div>\n    );\n  }\n\n  return <div className={styles.list}>{cells}</div>;\n}\n\ninterface State {\n  combinations: Combination[];\n  newCombination: Combination;\n}\n\nfunction App() {\n  const [state, setState] = useState<State>({\n    combinations: [],\n    newCombination: [],\n  });\n\n  // Restore state\n  useEffect(() => {\n    try {\n      const valueStr = localStorage.getItem(\"AppState\");\n      if (valueStr != null) {\n        const value = JSON.parse(valueStr);\n        setState(value);\n      }\n    } catch {}\n  }, []);\n\n  // Store state\n  useEffect(() => {\n    try {\n      const valueStr = JSON.stringify(state);\n      localStorage.setItem(\"AppState\", valueStr);\n    } catch {}\n  }, [state]);\n\n  const onClickDie = useCallback(\n    (e: React.MouseEvent<HTMLElement>, value: number) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setState(prevState => {\n        if (prevState.newCombination.length === 2) {\n          const newCombination = [...prevState.newCombination, value].sort();\n          return {\n            ...prevState,\n            combinations: prevState.combinations.concat([newCombination]),\n            newCombination: [],\n          };\n        }\n        return {\n          ...prevState,\n          newCombination: prevState.newCombination.concat([value]),\n        };\n      });\n    },\n    []\n  );\n\n  const onClickCancelDie = useCallback(\n    (e: React.MouseEvent<HTMLElement>, index: number) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setState(prevState => {\n        return {\n          ...prevState,\n          newCombination: [\n            ...prevState.newCombination.slice(0, index),\n            ...prevState.newCombination.slice(index + 1),\n          ],\n        };\n      });\n    },\n    []\n  );\n\n  const onClickDelete = useCallback(\n    (e: React.MouseEvent<HTMLElement>, index: number) => {\n      e.preventDefault();\n      e.stopPropagation();\n      setState(prevState => {\n        return {\n          ...prevState,\n          combinations: [\n            ...prevState.combinations.slice(0, index),\n            ...prevState.combinations.slice(index + 1),\n          ],\n        };\n      });\n    },\n    []\n  );\n\n  const onClickClearAll = useCallback(\n    (e: React.MouseEvent<HTMLElement>) => {\n      const needConfirm = state.combinations.length > 0;\n      // eslint-disable-next-line\n      const proceed = !needConfirm || confirm(\"Are you sure to clear all?\");\n      if (proceed) {\n        setState(prevState => {\n          return {\n            newCombination: [],\n            combinations: [],\n          };\n        });\n      }\n    },\n    [state]\n  );\n\n  return (\n    <div className={styles.app}>\n      <NewCombinationInput\n        newCombination={state.newCombination}\n        onClickDie={onClickDie}\n        onClickClearAll={onClickClearAll}\n        onClickCancelDie={onClickCancelDie}\n      />\n      <CombinationList\n        combinations={state.combinations}\n        onClickDelete={onClickDelete}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}